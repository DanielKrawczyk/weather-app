{"version":3,"sources":["states/cityState.js","components/Search.jsx","components/Loading.jsx","states/infoState.js","components/Info.jsx","states/dataState.js","components/functions/index.js","components/Main.jsx","components/Navbar.jsx","components/functions/fetch.js","App.js","index.js"],"names":["cityState","atom","key","default","Search","props","useRecoilState","city","setCity","id","className","type","onChange","el","target","value","onClick","length","onSearch","Loading","xmlns","fill","viewBox","d","infoState","Info","info","useRecoilValue","msg","document","getElementById","classList","add","btn","dataState","f","checkData","data","unixToLocal","time","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","getTime","toLocaleString","Main","style","marginTop","textAlign","name","sys","country","localStorage","JSON","parse","getItem","fav","contains","remove","removeItem","setItem","stringify","markAsFavourite","src","weather","icon","alt","main","temp","toFixed","description","feels_like","temp_min","temp_max","sunrise","sunset","pressure","humidity","transform","wind","deg","width","height","fillRule","speed","Navbar","a","fetch","keys","res","status","cod","message","json","fetchData","App","setInfo","useSetRecoilState","setData","handleShowInfo","searchForCity","x","then","catch","err","console","log","finally","useEffect","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3ad88675.chunk.js","sourcesContent":["import { atom } from 'recoil';\r\n\r\n// Current city state\r\nconst cityState = atom({\r\n    key: \"city state\",\r\n    default: \"\"\r\n});\r\n\r\nexport default cityState;","import { useRecoilState } from 'recoil';\r\nimport cityState from '../states/cityState';\r\n\r\n// Search component, where you type name of the city you are looking for and it send that city name through props to App component\r\nfunction Search(props) {\r\n    const [ city, setCity ] = useRecoilState(cityState);\r\n\r\n    return (\r\n        <div id=\"search\" className=\"search\">\r\n            <p className=\"search-label\">Search for city: </p>\r\n            <span className=\"search-input\">\r\n                <input className=\"search-input\" type=\"text\" id=\"search\" onChange={(el) => {\r\n                    setCity(el.target.value);\r\n                }} />\r\n                <h1 className=\"search-button\" onClick={() => {\r\n                    if (city.length > 0) props.onSearch(city);\r\n                }}>\r\n                    <i className=\"bi bi-search rotate\"></i>\r\n                </h1>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","// Loading component\r\nfunction Loading() {   \r\n    return (\r\n        <div id=\"loading\" className=\"hidden\">\r\n            <span>Loading data...&emsp;</span>\r\n            <svg id=\"rotate\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" className=\"bi bi-sun\" viewBox=\"0 0 16 16\">\r\n                <path d=\"M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z\"/>\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import { atom } from 'recoil';\r\n\r\n// Information state\r\nconst infoState = atom({\r\n    key: \"info state\",\r\n    default: \"\"\r\n})\r\n\r\nexport default infoState;","import { useRecoilValue } from 'recoil';\r\nimport infoState from '../states/infoState';\r\n\r\n// Component that show information\r\nfunction Info() {\r\n    const info = useRecoilValue(infoState);\r\n\r\n    return (\r\n        <div id=\"info\" className=\"hidden\">\r\n            <span>{info.msg}</span>\r\n            <br />\r\n            <button onClick={() => /* Hide that component after clicking button */ document.getElementById('info').classList.add('hidden')}>{info.btn}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info;","import { atom } from 'recoil';\r\n\r\n// Current city weather data state. If there is no data - there is no data\r\nconst dataState = atom({\r\n    key: \"data state\",\r\n    default: \"NO_DATA\"\r\n})\r\n\r\nexport default dataState;","// Functions that runs without putting them into the react component\r\n\r\n// Check recoil dataState if there is data to be showed\r\nfunction checkData(data) {\r\n    if (data === \"NO_DATA\") return true;\r\n    else return false;\r\n}\r\n\r\n// Convert unix time to readable for everyday users\r\nfunction unixToLocal(time) {\r\n    const date = new Date(time * 1000);\r\n    const hours = \"0\" + date.getHours(),\r\n    minutes = \"0\" + date.getMinutes(),\r\n    seconds = \"0\" + date.getSeconds();\r\n\r\n    return `${hours.substr(-2)}:${minutes.substr(-2)}:${seconds.substr(-2)}`\r\n}\r\n\r\n// Return current time\r\nfunction getTime() {\r\n    const date = new Date().toLocaleString();\r\n    return date;\r\n}\r\n\r\n// Object with short name and all functions that I need somewhere else\r\nconst f = { checkData, unixToLocal, getTime };\r\n\r\nexport default f;","import { useRecoilValue } from 'recoil';\r\nimport dataState from '../states/dataState';\r\nimport f from './functions/index';\r\n\r\n// Main component that showes weather information\r\nfunction Main() {\r\n    const data = useRecoilValue(dataState),\r\n    // Destructure functions from object\r\n    { checkData, unixToLocal, getTime } = f;\r\n\r\n    // Mark city as fvourite and save it to localStorage, so after few days it loads the city you marked, unless you did not cleared localStorage :|\r\n    function markAsFavourite() {\r\n        const fav = document.getElementById('favourite').classList;\r\n        \r\n        if (fav.contains('added')) {\r\n            fav.remove('added');\r\n            localStorage.removeItem(\"fav\");\r\n        } else {\r\n            fav.add('added');\r\n            localStorage.setItem(\"fav\", JSON.stringify(data.name))\r\n        }\r\n    }\r\n\r\n    // Check if the current city is in your localStorage, and if it's true - return class fragment that will color start to yellow\r\n    function checkLocal() {\r\n        if (\"fav\" in localStorage && data.name === JSON.parse(localStorage.getItem(\"fav\"))) {\r\n            return \"added\";\r\n        } else return \"\";\r\n    }\r\n\r\n    // If there is data in dataState recoil - show main component with all the informations, if not - ask user to search for city using search component\r\n    if (!checkData(data)) {\r\n        return (\r\n            <div id=\"main\" className=\"main\">\r\n                <div className=\"main-title\">\r\n                    <h6>{getTime()}</h6>\r\n                    <h1>{data.name} ({data.sys.country})<i id=\"favourite\" className={`bi bi-star favourite ${checkLocal()}`} onClick={() => markAsFavourite()}></i></h1>\r\n                </div>\r\n                <div className=\"main-info\">\r\n                    <div className=\"main-info_weather\">\r\n                        <div className=\"main-info_weather_icon\">\r\n                            <img src={`http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`} alt=\"weather icon\"/>\r\n                            <h1>{data.main.temp.toFixed(1)}&deg;C</h1>\r\n                        </div>\r\n                        <div className=\"main-info_weather_description\">\r\n                            {data.weather[0].description}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"main-info_temp\">\r\n                        <p>Feels like: {data.main.feels_like.toFixed(1)}&deg;C</p>\r\n                        <p>Min: {data.main.temp_min.toFixed(1)}&deg;C</p>\r\n                        <p>Max: {data.main.temp_max.toFixed(1)}&deg;C</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"main-sun\">\r\n                    <p>Sunrise: {unixToLocal(data.sys.sunrise)}</p>\r\n                    <p>Sunset: {unixToLocal(data.sys.sunset)}</p>\r\n                </div>\r\n                <div className=\"main-addon\">\r\n                    <p>Pressure: {data.main.pressure} hPa</p>\r\n                    <p>Humidity: {data.main.humidity}%</p>\r\n                    <p> \r\n                        Wind: \r\n                        &emsp;\r\n                        <svg style={{transform: `rotate(${data.wind.deg}deg)`}} xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-arrow-up\" viewBox=\"0 0 16 16\">\r\n                            <path fillRule=\"evenodd\" d=\"M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z\"/>\r\n                        </svg>\r\n                        &emsp;\r\n                        {data.wind.speed} m/s\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div style={{marginTop: \"20vh\"}}>\r\n                <h1 style={{textAlign: \"center\"}}>Please select your city!</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","// Well, it's just a navbar. What you expect after seeing just one simple logo and gray background rectangle?\r\nfunction Navbar() {\r\n    return (\r\n        <div id=\"navbar\" className=\"navbar\">\r\n            <h1><i className=\"bi bi-cloud-lightning-rain\"></i>&emsp;Weather App</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import * as keys from '../../data/keys.json';\r\n\r\n// Fetch weather data from API\r\nasync function fetchData(city) {\r\n    const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${keys.key}`);\r\n    if (res.status === 404) return { cod: 404, message: \"City not found!\" };\r\n    const data = res.json();\r\n    return data;\r\n}\r\n\r\nexport default fetchData;","import { useEffect } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport Search from \"./components/Search\";\nimport Loading from \"./components/Loading\";\nimport Info from \"./components/Info\";\nimport Main from './components/Main';\nimport Navbar from './components/Navbar';\nimport fetchData from './components/functions/fetch';\nimport infoState from './states/infoState';\nimport dataState from './states/dataState';\n\n// I could say it's a heart of the whole app, but the veins width are not enough to carry 16px size letters, so it's just another important component\nfunction App() {\n  const setInfo = useSetRecoilState(infoState),\n  setData = useSetRecoilState(dataState);\n\n  // Function that show info component\n  function handleShowInfo(info) {\n      setInfo(info);\n      document.getElementById(\"info\").classList.remove(\"hidden\");\n  }\n\n  // Function that call fetch function and handling eventual errors\n  function searchForCity(x) {\n      document.getElementById(\"loading\").classList.remove(\"hidden\");\n\n      // fetchData is a function with fetch method\n      fetchData(x)\n      .then(res => {\n          // if data is succesfully fetched\n          if (res.cod === 200) {\n              setData(res); // Save that data to dataState recoil\n          } else if (res.cod === 404) // If there is not such city (like after typing hello! Truly unbelieveable there is no \"Hello\" city!)\n              handleShowInfo({ msg:\"I couldn't find the city you are looking for! Are you sure you spell it right?\", btn:\"Let's check!\" });\n          else\n            // When there is an error I've never seen before\n              handleShowInfo({ msg:\"Ooops! Something went wrong! Please let us know about your issue or try again later!\", btn:\"Okay!\" });\n      })\n      .catch(err => {\n        // Classicaly catching errors with Mr. Catcherr\n          handleShowInfo({ msg:\"What an unexpected and unwanted error has been occured! Check your internet connection, let me know about this issue or try again later!\", btn:\"Not nice!\" });\n          console.log(err);\n      })\n      // All is done, so we can remove loading component\n      .finally(() => document.getElementById(\"loading\").classList.add(\"hidden\"));\n  }\n\n  // If there is a city in localStorage, look for him instead of doing nothing!\n  useEffect(() => {\n    if (\"fav\" in localStorage) {\n      searchForCity(JSON.parse(localStorage.getItem(\"fav\")))\n    }\n  })\n\n  return (\n    <main>\n      <Loading />\n      <Info />\n      <Navbar />\n      <Search onSearch={(x) => searchForCity(x)} />\n      <Main />\n    </main>\n  )\n}\n\nexport default App;","import React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/main.css';\n\n// Basic react index file\nReactDOM.render(\n  <React.StrictMode>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}